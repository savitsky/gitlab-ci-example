---
variables:
  WERF_KUBECONFIG_BASE64: $KUBE_CONFIG

stages:
  - build
  - deploy
  - actionsDB
  - clearCFcache
  - cleanup

before_script:
  - source "$(~/bin/trdl use werf 1.2 stable)"
  - type werf && source $(werf ci-env gitlab --as-file)

.base_build:
  stage: build
  script:
    - |
      echo "Branch: ${CI_COMMIT_REF_NAME}"
      werf build --env=$CI_COMMIT_BRANCH
  except: [schedules]
  tags: [werf]

.base_deploy:
  stage: deploy
  script:
    - git branch
    - werf converge --require-built-images --set "environment=${CI_ENVIRONMENT_NAME}" --set "dockerconfigjson=$DOCKER_CONFIG_BASE64" --set "mongobrnsshkey=$MONGO_SSH_KEY_B64" --values=$WERF_VALUES.helm/values-${CI_ENVIRONMENT_NAME}.yaml
  except: [schedules]
  tags: [werf]

build prod:
  extends: .base_build
  environment:
    name: prod
  only: [main]
  when: manual

deploy prod:
  extends: .base_deploy
  environment:
    name: prod
  only: [main]
  when: manual

Backup Mongo:
  stage: actionsDB
  script:
    - werf run --docker-options="-e MONGO_SSH_KEY_B64=$MONGO_SSH_KEY_B64 -e MINIO_HOST=$MINIO_HOST -e MINIO_ACCESS_KEY=$MINIO_ACCESS_KEY -e MINIO_SECRET_KEY=$MINIO_SECRET_KEY -e MINIO_BUCKET=$MINIO_BUCKET" minio -- /usr/local/bin/backup.sh BACKUP
  only: [main]
  tags: [werf]
  when: manual

Restore Mongo:
  stage: actionsDB
  script:
    - |
      echo "CI_COMMIT_BRANCH: ${CI_COMMIT_BRANCH}"      
      if [[ "$CI_COMMIT_BRANCH" == "main" ]]; then
        NAMESPACE="api-v1-prod"
        ENVNAME="prod"
      elif [[ "$CI_COMMIT_BRANCH" == "dev" ]]; then
        NAMESPACE="api-v1-dev"
        ENVNAME="dev"
      else
        echo "‚ùå Unsupported branch: $CI_COMMIT_BRANCH"
        exit 1
      fi
      echo "Using namespace: $NAMESPACE"
      echo "Using env: $ENVNAME"
    - werf run --docker-options="-e MINIO_HOST=$MINIO_HOST -e MINIO_ACCESS_KEY=$MINIO_ACCESS_KEY -e MINIO_SECRET_KEY=$MINIO_SECRET_KEY -e MINIO_BUCKET=$MINIO_BUCKET -e KUBECONFIG_B64=$KUBE_CONFIG -e MONGO_K8S_USER=$MONGO_K8S_USER -e MONGO_K8S_PASS=$MONGO_K8S_PASS" minio -- /usr/local/bin/backup.sh RESTORE "$NAMESPACE" "$ENVNAME"
  only: [main]
  tags: [werf]
  when: manual

clear CF cache:
  stage: clearCFcache
  before_script:
    - |
      DOMAIN=$(yq '.global.domainOverride' .helm/values-${CI_COMMIT_BRANCH}.yaml)
      echo "Using DOMAIN: $DOMAIN"
      export DOMAIN
  script:
    - bash ./scripts/cloudflare.sh --purge $DOMAIN
  only: [main]
  tags: [werf]
  when: manual

cleanup_registry:
  stage: cleanup
  script:
    - werf cleanup --repo ${CI_REGISTRY}/${CI_PROJECT_PATH}
  only: [schedules]
  tags: [werf]

cleanup_runner:
  stage: cleanup
  script:
    - werf host cleanup --allowed-docker-storage-volume-usage=60 --allowed-docker-storage-volume-usage-margin=10
  only: [schedules]
  tags: [werf]
